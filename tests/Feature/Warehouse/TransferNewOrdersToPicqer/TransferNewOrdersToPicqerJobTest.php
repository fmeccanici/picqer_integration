<?php


namespace Tests\Feature\Warehouse\TransferNewOrdersToPicqer;


use App\Warehouse\Application\TransferNewOrdersToPicqer\TransferNewOrdersToPicqer;
use App\Warehouse\Application\TransferNewOrdersToPicqer\TransferNewOrdersToPicqerInput;
use App\Warehouse\Domain\Orders\Order;
use App\Warehouse\Domain\Orders\OrderFactory;
use App\Warehouse\Domain\Repositories\BackorderRepositoryInterface;
use App\Warehouse\Domain\Repositories\PicklistRepositoryInterface;
use App\Warehouse\Domain\Services\ReviewRequestSenderServiceInterface;
use App\Warehouse\Infrastructure\Jobs\TransferNewOrdersToPicqerJob;
use App\Warehouse\Infrastructure\Persistence\InMemory\Repositories\InMemoryCollectionPicklistRepository;
use App\Warehouse\Infrastructure\Persistence\InMemory\Repositories\InMemoryCollectionShipmentRepository;
use App\Warehouse\Infrastructure\Persistence\InMemory\Repositories\InMemoryOrderRepository;
use App\Warehouse\Infrastructure\Services\WarehouseService;
use App\Woei\Domain\Repositories\ShipmentRepositoryInterface;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Queue;
use Tests\Feature\Warehouse\DummyCustomerRepository;
use Tests\Feature\Warehouse\DummyOrderFulfillmentService;
use Tests\Feature\Warehouse\DummyOrderProcessorService;
use Tests\Feature\Warehouse\DummyResourcePlanningService;
use Tests\Feature\Warehouse\DummyReviewRequestSenderService;
use Tests\Feature\Warehouse\InMemoryCollectionBackorderRepository;
use Tests\TestCase;
use Tests\Unit\Warehouse\DummyMailerService;

class TransferNewOrdersToPicqerJobTest extends TestCase
{
    use DatabaseMigrations;

    protected InMemoryOrderRepository $picqerOrderRepository;
    protected InMemoryOrderRepository $sourceOrderRepository;
    protected DummyCustomerRepository $picqerCustomerRepository;
    protected DummyOrderProcessorService $orderProcessor;
    protected DummyResourcePlanningService $resourcePlanningService;
    protected TransferNewOrdersToPicqer $useCase;
    protected TransferNewOrdersToPicqerInput $useCaseInput;
    protected Collection $newOrders;
    protected int $amountOfNewOrders;
    protected WarehouseService $warehouseService;
    protected BackorderRepositoryInterface $backorderRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->picqerOrderRepository = new InMemoryOrderRepository();
        $this->sourceOrderRepository = new InMemoryOrderRepository();
        $this->picqerCustomerRepository = new DummyCustomerRepository();
        $this->orderProcessor = new DummyOrderProcessorService();
        $this->resourcePlanningService = new DummyResourcePlanningService();
        $this->app->bind(ReviewRequestSenderServiceInterface::class, DummyReviewRequestSenderService::class);
        $this->picklistRepository = new InMemoryCollectionPicklistRepository();
        $this->app->bind(PicklistRepositoryInterface::class, function () {return $this->picklistRepository;});
        $this->shipmentRepository = new InMemoryCollectionShipmentRepository();
        $this->app->bind(ShipmentRepositoryInterface::class, function () {return $this->shipmentRepository;});
        $this->backorderRepository = new InMemoryCollectionBackorderRepository();
        $this->app->bind(BackorderRepositoryInterface::class, function () {return $this->backorderRepository;});

        $this->amountOfNewOrders = 5;
        $this->newOrders = OrderFactory::create($this->amountOfNewOrders, [
            'status' => 'new'
        ]);

        $this->sourceOrderRepository->addMultiple($this->newOrders);
        $this->newOrders->each(function (Order $order) {
                $this->picklistRepository->add($order->picklists()->first());
        });

        $this->warehouseService = new WarehouseService($this->picklistRepository, new DummyMailerService(), new DummyReviewRequestSenderService(), $this->picqerCustomerRepository, $this->sourceOrderRepository, new DummyOrderFulfillmentService(), $this->shipmentRepository);
        $this->useCase = new TransferNewOrdersToPicqer($this->sourceOrderRepository, $this->picqerOrderRepository, $this->picqerCustomerRepository, $this->orderProcessor, $this->warehouseService, $this->backorderRepository);
        $this->useCaseInput = new TransferNewOrdersToPicqerInput();
    }

    /** @test */
    public function it_should_transfer_new_orders_to_picqer()
    {
        // Given
        self::assertEquals(5, $this->sourceOrderRepository->findNewOrders()->count());

        // When
        (new TransferNewOrdersToPicqerJob($this->sourceOrderRepository, $this->picqerOrderRepository, $this->picqerCustomerRepository, $this->orderProcessor, $this->warehouseService, $this->backorderRepository))->handle();

        // Then
        self::assertEquals(0, $this->sourceOrderRepository->findNewOrders()->count());
    }

    /** @test */
    public function it_should_call_the_use_case()
    {
        // Given
        Queue::fake();

        dispatch(
            new TransferNewOrdersToPicqerJob(
                $this->sourceOrderRepository,
                $this->picqerOrderRepository,
                $this->picqerCustomerRepository,
                $this->orderProcessor,
                $this->warehouseService,
                $this->backorderRepository
            )
        );

        // Then
        Queue::assertPushedOn('picqer', TransferNewOrdersToPicqerJob::class);
    }
}
