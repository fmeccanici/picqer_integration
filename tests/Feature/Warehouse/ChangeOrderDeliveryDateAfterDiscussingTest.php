<?php

namespace Tests\Feature\Warehouse;

use App\User;
use App\Warehouse\Domain\Orders\OrderFactory;
use App\Warehouse\Domain\Picklists\Picklist;
use App\Warehouse\Domain\Repositories\OrderRepositoryInterface;
use App\Warehouse\Infrastructure\Persistence\InMemory\Repositories\InMemoryOrderRepository;
use Carbon\CarbonImmutable;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Laravel\Passport\Passport;
use Tests\TestCase;

class ChangeOrderDeliveryDateAfterDiscussingTest extends TestCase
{
    use DatabaseMigrations;

    protected InMemoryOrderRepository $orderRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->orderRepository = new InMemoryOrderRepository();
        $this->app->bind(OrderRepositoryInterface::class, function () {return $this->orderRepository;});
        Passport::actingAs(User::factory()->create());
    }

    /** @test */
    public function it_should_change_the_delivery_date()
    {
        // Given
        $this->withoutExceptionHandling();
        $order = OrderFactory::create(1)->first();
        $this->orderRepository->add($order);
        $url = route('change-order-delivery-date-after-discussing', $order->reference());
        $deliveryDate = CarbonImmutable::now();
        $order->picklists()->each(function (Picklist $picklist) use ($deliveryDate) {
            $picklist->snoozeUntil($deliveryDate);
        });

        // When
        $response = $this->put($url, [
            'delivery_date' => $deliveryDate->toDateString()
        ]);

        // Then
        $response->assertOk();
        $foundOrder = $this->orderRepository->findOneByReference($order->reference());
        self::assertEquals($deliveryDate->toDateString(), $foundOrder->preferredDeliveryDate()->toDateString());
        $foundOrder->picklists()->each(function (Picklist $picklist) use ($deliveryDate) {
            self::assertEquals($picklist->preferredDeliveryDate()->toDateString(), $deliveryDate->toDateString());
        });
    }
}
