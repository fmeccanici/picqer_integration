<?php


namespace Tests\Feature\Warehouse;


use App\User;
use App\Warehouse\Application\SnoozePicklist\SnoozePicklist;
use App\Warehouse\Application\SnoozePicklist\SnoozePicklistInput;
use App\Warehouse\Domain\Orders\OrderFactory;
use App\Warehouse\Domain\Picklists\PicklistFactory;
use App\Warehouse\Domain\Repositories\PicklistRepositoryInterface;
use App\Warehouse\Domain\Services\ReviewRequestSenderServiceInterface;
use App\Warehouse\Infrastructure\Persistence\InMemory\Repositories\InMemoryCollectionPicklistRepository;
use Carbon\CarbonImmutable;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Laravel\Passport\Passport;
use Mockery;
use Tests\TestCase;

class SnoozePicklistTest extends TestCase
{
    use DatabaseMigrations;

    private InMemoryCollectionPicklistRepository $picklistRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->picklistRepository = new InMemoryCollectionPicklistRepository();
        $this->app->bind(PicklistRepositoryInterface::class, DummyPicklistRepository::class);
        $this->app->bind(ReviewRequestSenderServiceInterface::class, DummyReviewRequestSenderService::class);

    }


    /** @test */
    public function it_should_change_snoozed_until_attribute()
    {
        // Given
        $order = OrderFactory::constantUnprocessed();
        $picklist = $order->picklists()->first();
        $this->picklistRepository->add($picklist);

        $snoozeUntil = CarbonImmutable::create(2021, 12, 12);
        $useCase = new SnoozePicklist($this->picklistRepository);
        $useCaseInput = new SnoozePicklistInput([
            'picklist_id' => $picklist->id(),
            'snooze_until' => $snoozeUntil->format("d-m-Y")
        ]);

        // When
        $useCase->execute($useCaseInput);

        // Then
        $foundPicklist = $this->picklistRepository->findByReference($picklist->reference());
        self::assertEquals($snoozeUntil->format("d-m-Y"), $foundPicklist->snoozedUntil()->format("d-m-Y"));
    }


    /** @test */
    public function it_should_be_able_to_call_the_route() {

        // Given
        Passport::actingAs(User::factory()->create());

        $picklistRepositoryMock = $this->partialMock(InMemoryCollectionPicklistRepository::class, function (Mockery\MockInterface $mock) {
            $picklist = PicklistFactory::dummy();
            $mock->shouldReceive('findOneById')->once()->andReturn($picklist);
            $mock->shouldReceive('update')->once()->andReturn($picklist);
        });

        $this->app->bind(PicklistRepositoryInterface::class, function () use ($picklistRepositoryMock) {return $picklistRepositoryMock;});

        $url = route("snooze-picklist");

        // When
        $response = $this->post($url, [
            "picklist_id" => "Test Reference",
            "snooze_until" => "01-01-2022"
        ]);

        // Then
        $response->assertStatus(200);
        self::assertArrayNotHasKey("error", $response);
    }

}
