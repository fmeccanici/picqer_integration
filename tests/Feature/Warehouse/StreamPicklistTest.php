<?php

namespace Tests\Feature\Warehouse;

use App\Warehouse\Infrastructure\Exporters\PicqerPackingSlipGenerator;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Str;
use Tests\TestCase;

class StreamPicklistTest extends TestCase
{
    use DatabaseMigrations;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->storage = Storage::fake();
    }

    /** @test */
    public function it_should_return_401_when_changing_picklist_id_of_url()
    {
        // Given
        $picklistId = 123;

        $url = URL::signedRoute('stream-picklist', [
            'picklistId' => $picklistId
        ]);

        $url = Str::replace('123', '321', $url);

        // When
        $response = $this->get($url);

        // Then
        $response->assertUnauthorized();
    }

    /** @test */
    public function it_should_return_pdf_of_picklist_id()
    {
        // Given
        $picklistId = 123;
        $pdfContent = "Test Pdf Content";
        $path = sprintf(PicqerPackingSlipGenerator::DEFAULT_FILENAME, $picklistId);
        $this->storage->put($path, $pdfContent);
        $url = URL::signedRoute('stream-picklist', [
            'picklistId' => $picklistId
        ]);

        // When
        $response = $this->get($url);

        // Then
        $response->assertOk();
        $response->assertHeader('Content-Type', 'application/pdf');
        $response->assertHeader('Content-Disposition', 'attachment; filename="pakbon.pdf"');

        // Rollback
        $this->storage->delete($path);
    }
}
