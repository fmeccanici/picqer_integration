<?php


namespace Tests\Feature\Warehouse;


use App\User;
use App\Warehouse\Application\UnsnoozePicklist\UnsnoozePicklist;
use App\Warehouse\Application\UnsnoozePicklist\UnsnoozePicklistInput;
use App\Warehouse\Domain\Orders\OrderFactory;
use App\Warehouse\Domain\Picklists\PicklistFactory;
use App\Warehouse\Domain\Repositories\PicklistRepositoryInterface;
use App\Warehouse\Domain\Services\ReviewRequestSenderServiceInterface;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Laravel\Passport\Passport;
use Mockery;
use Tests\TestCase;

class UnsnoozePicklistTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * @var DummyPicklistRepository
     */
    private DummyPicklistRepository $picklistRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->picklistRepository = new DummyPicklistRepository();
        $this->app->bind(PicklistRepositoryInterface::class, DummyPicklistRepository::class);
        $this->app->bind(ReviewRequestSenderServiceInterface::class, DummyReviewRequestSenderService::class);

    }


    /** @test */
    public function it_should_unsnooze_picklist()
    {
        // Given
        $order = OrderFactory::constantUnprocessed();
        $picklist = $order->picklists()->first();
        $this->picklistRepository->add($picklist);

        $useCase = new UnsnoozePicklist($this->picklistRepository);
        $useCaseInput = new UnsnoozePicklistInput([
            'picklist_reference' => $picklist->reference()
        ]);

        // When
        $useCase->execute($useCaseInput);

        // Then
        $foundPicklist = $this->picklistRepository->findByReference($picklist->reference());
        self::assertFalse($foundPicklist->isSnoozed());
    }

    /** @test */
    public function it_should_be_able_to_call_the_route() {

        // Given
        Passport::actingAs(User::factory()->create());

        $mock = $this->partialMock(DummyPicklistRepository::class, function (Mockery\MockInterface $mock) {
            $picklist = PicklistFactory::dummy();
            $mock->shouldReceive('findByReference')->once()->andReturn($picklist);
            $mock->shouldReceive('update')->once()->andReturn($picklist);
        });

        $url = route("unsnooze-picklist");

        // When
        $response = $this->post($url, [
            "picklist_reference" => "Test Reference",
        ]);

        // Then
        $response->assertStatus(200);
        self::assertArrayNotHasKey("error", $response);
    }
}
