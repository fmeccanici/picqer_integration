<?php


namespace Tests\Unit\Warehouse;


use App\Warehouse\Domain\Orders\DeliveryOption;
use App\Warehouse\Infrastructure\Persistence\InMemory\Repositories\InMemoryCollectionShipmentRepository;
use App\Warehouse\Infrastructure\Persistence\InMemory\Repositories\InMemoryOrderRepository;
use App\Warehouse\Infrastructure\Services\DeliveryOptionService;
use App\Warehouse\Infrastructure\Services\WarehouseService;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\Feature\Warehouse\DummyCustomerRepository;
use Tests\Feature\Warehouse\DummyOrderFulfillmentService;
use Tests\Feature\Warehouse\DummyPicklistRepository;
use Tests\Feature\Warehouse\DummyReviewRequestSenderService;
use Tests\TestCase;

class WarehouseServiceTest extends TestCase
{
    use DatabaseMigrations;

    private WarehouseService $warehouseService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $picklistRepository = new DummyPicklistRepository();
        $mailerService = new DummyMailerService();
        $reviewRequestSender = new DummyReviewRequestSenderService();
        $customerRepository = new DummyCustomerRepository();
        $orderRepository = new InMemoryOrderRepository();
        $this->warehouseService = new WarehouseService($picklistRepository, $mailerService, $reviewRequestSender,
                                                        $customerRepository, $orderRepository, new DummyOrderFulfillmentService(), new InMemoryCollectionShipmentRepository());
    }

    /** @test */
    public function it_should_return_the_delivery_option() {

        // Given
        $carrierName = "Test Carrier";
        $country = "Nederland";
        $deliveryOptionName = "Test Name";
        $deliveryOption = new DeliveryOption($carrierName, $deliveryOptionName, 1234, 1234, 001);

        $mock = $this->createMock(DeliveryOptionService::class);
        $mock->method('getDeliveryOption')
            ->willReturn($deliveryOption);
        $this->app->instance(DeliveryOptionService::class, $mock);

        // When
        $foundDeliveryOption = $this->warehouseService->getDeliveryOption($country, $deliveryOptionName, $carrierName);

        // Then
        self::assertEquals($deliveryOption->carrier(), $foundDeliveryOption->carrier());
        self::assertEquals($deliveryOption->name(), $foundDeliveryOption->name());
        self::assertEquals($deliveryOption->characteristic(), $foundDeliveryOption->characteristic());
        self::assertEquals($deliveryOption->option(), $foundDeliveryOption->option());
    }

    /** @test */
    public function it_should_return_null_if_the_delivery_option_was_not_found()
    {
        // Given
        $carrierName = "Invalid Carrier";
        $country = "Invalid Country";
        $deliveryOptionName = "Invalid Delivery Option Name";

        // When
        $foundDeliveryOption = $this->warehouseService->getDeliveryOption($country, $deliveryOptionName, $carrierName);

        // Then
        self::assertNull($foundDeliveryOption);
    }
}
