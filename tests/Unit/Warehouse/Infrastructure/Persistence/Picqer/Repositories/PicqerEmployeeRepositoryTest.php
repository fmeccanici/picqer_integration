<?php

namespace Tests\Unit\Warehouse\Infrastructure\Persistence\Picqer\Repositories;

use App\Warehouse\Domain\Employees\Employee;
use App\Warehouse\Infrastructure\ApiClients\PicqerApiClient;
use App\Warehouse\Infrastructure\Exceptions\PicqerEmployeeRepositoryOperationException;
use App\Warehouse\Infrastructure\Persistence\Picqer\Repositories\PicqerEmployeeRepository;
use Mockery\MockInterface;
use Picqer\Api\Client;
use Tests\TestCase;
use Tests\Unit\Warehouse\Mocks\Picqer\PicqerMock;

class PicqerEmployeeRepositoryTest extends TestCase
{
    protected Client $picqerMock;
    protected PicqerEmployeeRepository $picqerEmployeeRepository;
    protected int $idUser;
    protected string $firstName;
    protected string $lastName;
    protected string $userName;
    protected string $emailAddress;
    protected bool $isAdmin;
    protected bool $isActive;
    protected string $lastLoginAt;
    protected string $createdAt;
    protected string $updatedAt;
    protected string $language;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->idUser = 423;
        $this->userName = 'stephan';
        $this->firstName = 'Stephan';
        $this->lastName = 'Groen';
        $this->emailAddress = 'demo@example.com';
        $this->isAdmin = true;
        $this->isActive = true;
        $this->lastLoginAt = '2015-07-24 12:11:20';
        $this->createdAt = '2013-12-19 13:47:13';
        $this->updatedAt = '2015-07-24 12:11:20';
        $this->language = 'nl';

    }

    /** @test */
    public function it_should_find_employee_by_id()
    {
        // Given
        $picqerMock = $this->mock(PicqerMock::class, function (MockInterface $mock) {
            $mock->shouldReceive('getUser')
                ->once()
                ->andReturn([
                    'success' => true,
                    'data' => [
                        'iduser' => $this->idUser,
                        'username' => $this->userName,
                        'firstname' => $this->firstName,
                        'lastname' => $this->lastName,
                        'emailaddress' => $this->emailAddress,
                        'language' => $this->language,
                        'admin' => $this->isAdmin,
                        'active' => $this->isActive,
                        'last_login_at' => $this->lastLoginAt,
                        'created_at' => $this->createdAt,
                        'updated_at' => $this->updatedAt,
                    ],
                ]);
        });

        $picqerApiClientMock = $this->mock(PicqerApiClient::class, function (MockInterface $mock) use ($picqerMock) {
            $mock->shouldReceive('getClient')
                ->once()
                ->andReturn($picqerMock);
        });
        $this->picqerEmployeeRepository = new PicqerEmployeeRepository($picqerApiClientMock);

        $employee = new Employee($this->firstName, $this->lastName);
        $employee->setIdentity($this->idUser);

        // When
        $foundEmployee = $this->picqerEmployeeRepository->findOneById($this->idUser);

        // Then
        self::assertEquals($employee, $foundEmployee);
    }

    /** @test */
    public function it_should_return_null_when_user_not_found()
    {
        // Given
        $picqerMock = $this->mock(PicqerMock::class, function (MockInterface $mock) {
            $mock->shouldReceive('getUser')
                ->once()
                ->andReturn([
                    'success' => false,
                    'error' => true,
                    'errorcode' => 404,
                    'errormessage' => json_encode([
                        'error' => true,
                        'error_code' => 0,
                        'error_message' => 'Item not found'
                    ])
                ]);
        });

        $picqerApiClientMock = $this->mock(PicqerApiClient::class, function (MockInterface $mock) use ($picqerMock) {
            $mock->shouldReceive('getClient')
                ->once()
                ->andReturn($picqerMock);
        });
        $picqerEmployeeRepository = new PicqerEmployeeRepository($picqerApiClientMock);

        // When
        $foundEmployee = $picqerEmployeeRepository->findOneById($this->idUser);

        // Then
        self::assertNull($foundEmployee);
    }

    /** @test */
    public function it_should_throw_exception_when_error_is_different_from_not_found()
    {
        // Given
        $errorMessage = 'Random Error';
        $picqerMock = $this->mock(PicqerMock::class, function (MockInterface $mock) use ($errorMessage){
            $mock->shouldReceive('getUser')
                ->once()
                ->andReturn([
                    'success' => false,
                    'error' => true,
                    'errorcode' => 404,
                    'errormessage' => json_encode([
                        'error' => true,
                        'error_code' => 11,
                        'error_message' => $errorMessage
                    ])
                ]);
        });

        $picqerApiClientMock = $this->mock(PicqerApiClient::class, function (MockInterface $mock) use ($picqerMock) {
            $mock->shouldReceive('getClient')
                ->once()
                ->andReturn($picqerMock);
        });
        $picqerEmployeeRepository = new PicqerEmployeeRepository($picqerApiClientMock);

        // Then
        $this->expectException(PicqerEmployeeRepositoryOperationException::class);
        $this->expectErrorMessage('Failed getting user with id ' . $this->idUser . ', error: ' . $errorMessage);

        // When
        $foundEmployee = $picqerEmployeeRepository->findOneById($this->idUser);

    }
}
