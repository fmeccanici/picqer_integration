<?php

namespace Tests\Unit\Warehouse\Infrastructure\Services\FeedbackCompany;

use App\Warehouse\Domain\Orders\OrderFactory;
use App\Warehouse\Domain\Parties\CustomerFactory;
use App\Warehouse\Domain\Services\ReviewRequestSenderServiceInterface;
use App\Warehouse\Infrastructure\ApiClients\FeedbackCompanyApiClient;
use App\Warehouse\Infrastructure\Persistence\InMemory\Repositories\InMemoryCollectionReviewRequestRepository;
use App\Warehouse\Infrastructure\Services\ReviewRequestSenders\FeedbackCompany\FeedbackCompanyReviewRequestSenderService;
use Mockery\MockInterface;
use Tests\TestCase;

class FeedbackCompanyReviewRequestSenderServiceTest extends TestCase
{
    private FeedbackCompanyReviewRequestSenderService $reviewRequestSenderService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->apiClient = $this->mock(FeedbackCompanyApiClient::class, function (MockInterface $mock) {
            $mock->shouldReceive('createOrder')->once()->andReturn(true);
            $mock->shouldReceive('getClient')->andReturnSelf();
        });

        $this->reviewRequestRepository = new InMemoryCollectionReviewRequestRepository();

        $this->reviewRequestSenderService = new FeedbackCompanyReviewRequestSenderService($this->apiClient, $this->reviewRequestRepository);
        $this->app->bind(ReviewRequestSenderServiceInterface::class, function () {return $this->reviewRequestSenderService;});
    }

    /** @test */
    public function it_should_create_an_order()
    {
        // Given
        $customer = CustomerFactory::create()->first();
        $order = OrderFactory::create(1, [
            'customerNumber' => $customer->customerNumber()
        ])->first();

        // When
        $reviewRequest = $this->reviewRequestSenderService->send($order);

        // Then
        self::assertNotNull($reviewRequest);
    }
}
