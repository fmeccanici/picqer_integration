<?php

namespace Tests\Unit\Warehouse\Infrastructure\Services;

use App\Warehouse\Domain\Orders\OrderFactory;
use App\Warehouse\Domain\Services\ReviewRequestSenderServiceInterface;
use App\Warehouse\Infrastructure\Persistence\MsSql\Repositories\MsSqlOrderRepository;
use App\Warehouse\Infrastructure\Persistence\Picqer\Repositories\PicqerOrderRepository;
use App\Warehouse\Infrastructure\Services\OrderFulfillmentService;
use Mockery\MockInterface;
use Tests\Feature\Warehouse\DummyReviewRequestSenderService;
use Tests\TestCase;

class OrderFulfillmentServiceTest extends TestCase
{
    private OrderFulfillmentService $orderFulfillmentService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->orderFulfillmentService = new OrderFulfillmentService();
        $this->app->bind(ReviewRequestSenderServiceInterface::class, DummyReviewRequestSenderService::class);

    }

    /** @test */
    public function it_should_return_true_when_all_orders_are_fulfilled()
    {
        // Given
        $picqerOrders = OrderFactory::create(10, [
            'status' => 'completed'
        ]);

        $msSqlOrders = OrderFactory::create(10, [
            'status' => 'completed'
        ]);

        $order = $picqerOrders->first();

        $picqerOrderRepositoryMock = $this->mock(PicqerOrderRepository::class, function (MockInterface $mock) use ($picqerOrders) {
            $mock->shouldReceive('findAllByReference')->once()->andReturn($picqerOrders);
        });

        $msSqlOrderRepositoryMock = $this->mock(MsSqlOrderRepository::class, function (MockInterface $mock) use ($msSqlOrders) {
            $mock->shouldReceive('findAllByReference')->once()->andReturn($msSqlOrders);
        });

        $this->app->instance(PicqerOrderRepository::class, $picqerOrderRepositoryMock);
        $this->app->instance(MsSqlOrderRepository::class, $msSqlOrderRepositoryMock);

        // When
        $isFulfilled = $this->orderFulfillmentService->isFulfilled($order);

        // Then
        self::assertTrue($isFulfilled);
    }

    /** @test */
    public function it_should_return_false_when_one_order_is_not_fulfilled()
    {
        // Given
        $picqerOrders = OrderFactory::create(1, [
            'status' => 'processing'
        ]);

        $msSqlOrders = OrderFactory::create(10, [
            'status' => 'completed'
        ]);

        $order = $picqerOrders->first();

        $picqerOrderRepositoryMock = $this->mock(PicqerOrderRepository::class, function (MockInterface $mock) use ($picqerOrders) {
            $mock->shouldReceive('findAllByReference')->once()->andReturn($picqerOrders);
        });

        $msSqlOrderRepositoryMock = $this->mock(MsSqlOrderRepository::class, function (MockInterface $mock) use ($msSqlOrders) {
            $mock->shouldReceive('findAllByReference')->once()->andReturn($msSqlOrders);
        });

        $this->app->instance(PicqerOrderRepository::class, $picqerOrderRepositoryMock);
        $this->app->instance(MsSqlOrderRepository::class, $msSqlOrderRepositoryMock);

        // When
        $isFulfilled = $this->orderFulfillmentService->isFulfilled($order);

        // Then
        self::assertFalse($isFulfilled);
    }
}
